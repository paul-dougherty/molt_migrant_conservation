####### these are modified versions of the "generate_trends()" function from the "bbsBayes" package that save 3,000 draws from the posterior distribution for trend estimates

# this first function estimates proportion population change between two years  --------

generate_posterior_prop_changes <- function (indices = NULL, Min_year = NULL, Max_year = NULL, quantiles = c(0.025, 
                                                                          0.05, 0.25, 0.75, 0.95, 0.975), slope = FALSE, prob_decrease = NULL, 
          prob_increase = NULL) 
{
  if (is.null(indices)) {
    stop("No indices supplied to generate_trends().")
    return(NULL)
  }
  n_all = indices$samples
  if (is.null(Min_year)) {
    min_year = indices$y_min
    Min_year <- indices$startyear
    minyn <- 1
  }
  else {
    min_year <- indices$y_min + (Min_year - indices$startyear)
    minyn <- 1 + (Min_year - indices$startyear)
    if (min_year < 0) {
      min_year = indices$y_min
      Min_year <- indices$startyear
      minyn <- 1
    }
  }
  if (is.null(Max_year)) {
    max_year = indices$y_max
    Max_year = indices$startyear + (max_year - indices$y_min)
    maxyn <- 1 + (indices$y_max - indices$y_min)
  }
  else {
    max_year <- indices$y_min + (Max_year - indices$startyear)
    maxyn <- 1 + (Max_year - indices$startyear)
  }
  regions = indices$regions
  area_weights <- indices$area_weights
  all_regions = names(n_all)
  dsum = indices$data_summary
  
  ## creating an empty list instead of a dataframe (we want 3000 posterior draws for each bcr in each year)
  #trend_posteriors <- vector('list', length(unique(dsum$Region)))
  trend_posteriors <- vector('list')
  
  
  
  # trend <- data.frame(Start_year = integer(), End_year = integer(), 
  #                     Region = character(), Region_alt = character(), Region_type = character(), 
  #                     Strata_included = character(), Strata_excluded = character(), 
  #                     Trend = double(), stringsAsFactors = FALSE)
  # for (qq in quantiles) {
  #   trend[, paste0("Trend_Q", qq)] <- double()
  # }
  #trend[, "Percent_Change"] <- double()
  # for (qq in quantiles) {
  #   trend[, paste0("Percent_Change_Q", qq)] <- double()
  # }
  for (rr in regions) {
    regsest = paste0(rr, "_", unique(dsum[which(dsum$Region_type == 
                                                  rr), "Region"]))
    for (rrs in regsest) {
      reg = gsub(rrs, pattern = paste0(rr, "_"), replacement = "", 
                 fixed = TRUE)
      w_summary_rows = which(dsum$Region == reg & dsum$Region_type == 
                               rr & dsum$Year %in% c(((indices$startyear + minyn) - 
                                                        1):((indices$startyear + maxyn) - 1)))
      n = n_all[[rrs]]
      reg_alt = unique(dsum[w_summary_rows, "Region_alt"])
      st_inc = unique(dsum[w_summary_rows, "Strata_included"])
      nstr = length(unlist(stringr::str_split(st_inc, pattern = " ; ")))
      st_exc = unique(dsum[w_summary_rows, "Strata_excluded"])
      if (slope) {
        bsl = function(i) {
          n = length(wy)
          sy = sum(i)
          sx = sum(wy)
          ssx = sum(wy^2)
          sxy = sum(i * wy)
          b = (n * sxy - sx * sy)/(n * ssx - sx^2)
          return(b)
        }
        wy = c(minyn:maxyn)
        ne = log(n[, wy])
        m = t(apply(ne, 1, FUN = bsl))
        sl.t = as.vector((exp(m) - 1) * 100)
      }
      ch = n[, maxyn]/n[, minyn]
      tr = ((ch^(1/(maxyn - minyn))) - 1) # got rid of 100 multiplyer bc we don't care about making it a percent
      
      ## saving the trend in the bcr in the list
      
      # trendt <- data.frame(Start_year = (indices$startyear + 
      #                                      minyn) - 1, End_year = (indices$startyear + maxyn) - 
      #                        1, Region = reg, Region_alt = reg_alt, Region_type = rr, 
      #                      Strata_included = st_inc, Strata_excluded = st_exc, 
      #                      Trend = median(tr), stringsAsFactors = FALSE)
      # for (qq in quantiles) {
      #   trendt[, paste0("Trend_Q", qq)] <- stats::quantile(tr, 
      #                                                      qq, names = FALSE)
      # }
      #trendt[, "Percent_Change"] <- 100 * (median(ch) - 
      #                                       1)
      # for (qq in quantiles) {
      #   trendt[, paste0("Percent_Change_Q", qq)] <- 100 * 
      #     (stats::quantile(ch, qq, names = FALSE) - 1)
      # }
      # if (slope) {
      #   trendt[, "Slope_Trend"] <- median(sl.t)
      #   for (qq in quantiles) {
      #     trendt[, paste0("Slope_Trend_Q", qq)] <- stats::quantile(sl.t, 
      #                                                              qq, names = FALSE)
      #   }
      # }
      # if (!is.null(prob_decrease)) {
      #   pch = 100 * (ch - 1)
      #   for (pp in prob_decrease) {
      #     trendt[, paste0("prob_decrease_", pp, "_percent")] <- length(pch[which(pch < 
      #                                                                              (-1 * pp))])/length(pch)
      #   }
      # }
      # if (!is.null(prob_increase)) {
      #   pch = 100 * (ch - 1)
      #   for (pp in prob_increase) {
      #     trendt[, paste0("prob_increase_", pp, "_percent")] <- length(pch[which(pch > 
      #                                                                              (pp))])/length(pch)
      #   }
      # }
      # trendt[, "Relative_Abundance"] <- mean(dsum[w_summary_rows, 
      #                                             "Index"])
      # trendt[, "Observed_Relative_Abundance"] <- mean(dsum[w_summary_rows, 
      #                                                      "obs_mean"])
      # trendt[, "Number_of_strata"] <- nstr
      # q1 = quantiles[1]
      # q2 = quantiles[length(quantiles)]
      # trendt[, paste0("Width_of_", (q2 - q1) * 100, "_percent_Credible_Interval")] <- trendt[, 
      #                                                                                       paste0("Trend_Q", q2)] - trendt[, paste0("Trend_Q", 
      #                                                                                                                                q1)]
      # if (slope) {
      #   trendt[, paste0("Width_of_", (q2 - q1) * 100, 
      #                   "_percent_Credible_Interval_Slope")] <- trendt[, 
      #                                                                  paste0("Slope_Trend_Q", q2)] - trendt[, paste0("Slope_Trend_Q", 
      #                                                                                                                 q1)]
      # }

      # trendt[, "Number_of_Routes"] <- mean(dsum[w_summary_rows, 
      #                                           "nrts_total"])
      # trendt[, "Mean_Number_of_Routes"] <- mean(dsum[w_summary_rows, 
      #                                                "nrts"])
      # trendt[, "backcast_flag"] <- mean(dsum[w_summary_rows, 
      #                                        "backcast_flag"])
      
      trend_posteriors[[rrs]] <- list(route_number = mean(dsum[w_summary_rows, 
                                                             "nrts_total"]),
                                    mean_route_number = mean(dsum[w_summary_rows, 
                                                                   "nrts"]),
                                    year = Min_year,
                                    year_change = tr)

     # trend = rbind(trend, trendt)
    }
  }
  return(trend_posteriors)
}



# this second function fits a slope to all the data points between two years and estimates average annual population change     --------

generate_posterior_prop_changes_slope <- function (indices = NULL, Min_year = NULL, Max_year = NULL, 
          quantiles = c(0.025, 0.05, 0.25, 0.75, 0.95, 0.975), slope = TRUE, 
          prob_decrease = NULL, prob_increase = NULL) 
{
  if (is.null(indices)) {
    stop("No indices supplied to generate_trends().")
    return(NULL)
  }
  n_all = indices$samples
  if (is.null(Min_year)) {
    min_year = indices$y_min
    Min_year <- indices$startyear
    minyn <- 1
  }
  else {
    min_year <- indices$y_min + (Min_year - indices$startyear)
    minyn <- 1 + (Min_year - indices$startyear)
    if (min_year < 0) {
      min_year = indices$y_min
      Min_year <- indices$startyear
      minyn <- 1
    }
  }
  if (is.null(Max_year)) {
    max_year = indices$y_max
    Max_year = indices$startyear + (max_year - indices$y_min)
    maxyn <- 1 + (indices$y_max - indices$y_min)
  }
  else {
    max_year <- indices$y_min + (Max_year - indices$startyear)
    maxyn <- 1 + (Max_year - indices$startyear)
  }
  regions = indices$regions
  area_weights <- indices$area_weights
  all_regions = names(n_all)
  dsum = indices$data_summary
  
  ## creating an empty list instead of a dataframe (we want 3000 posterior draws for each bcr in each year)
  #trend_posteriors <- vector('list', length(unique(dsum$Region)))
  trend_posteriors <- vector('list')
  
  
  # trend <- data.frame(Start_year = integer(), End_year = integer(), 
  #                     Region = character(), Region_alt = character(), Region_type = character(), 
  #                     Strata_included = character(), Strata_excluded = character(), 
  #                     Trend = double(), stringsAsFactors = FALSE)
  # for (qq in quantiles) {
  #   trend[, paste0("Trend_Q", qq)] <- double()
  # }
  # trend[, "Percent_Change"] <- double()
  # for (qq in quantiles) {
  #   trend[, paste0("Percent_Change_Q", qq)] <- double()
  # }
  for (rr in regions) {
    regsest = paste0(rr, "_", unique(dsum[which(dsum$Region_type == 
                                                  rr), "Region"]))
    for (rrs in regsest) {
      reg = gsub(rrs, pattern = paste0(rr, "_"), replacement = "", 
                 fixed = TRUE)
      w_summary_rows = which(dsum$Region == reg & dsum$Region_type == 
                               rr & dsum$Year %in% c(((indices$startyear + 
                                                         minyn) - 1):((indices$startyear + maxyn) - 1)))
      n = n_all[[rrs]]
      reg_alt = unique(dsum[w_summary_rows, "Region_alt"])
      st_inc = unique(dsum[w_summary_rows, "Strata_included"])
      nstr = length(unlist(stringr::str_split(st_inc, 
                                              pattern = " ; ")))
      st_exc = unique(dsum[w_summary_rows, "Strata_excluded"])
      if (slope) {
        bsl = function(i) {
          n = length(wy)
          sy = sum(i)
          sx = sum(wy)
          ssx = sum(wy^2)
          sxy = sum(i * wy)
          b = (n * sxy - sx * sy)/(n * ssx - sx^2)
          return(b)
        }
        wy = c(minyn:maxyn)
        ne = log(n[, wy])
        m = t(apply(ne, 1, FUN = bsl))
        sl.t = as.vector((exp(m) - 1)) # got rid of 100 multiplyer bc we don't care about making it a percent
      }
      ch = n[, maxyn]/n[, minyn]
      tr = ((ch^(1/(maxyn - minyn))) - 1) # got rid of 100 multiplyer bc we don't care about making it a percent
      
      ## saving the trend in the bcr in the list
      
      # trendt <- data.frame(Start_year = (indices$startyear + 
      #                                      minyn) - 1, End_year = (indices$startyear + 
      #                                                                maxyn) - 1, Region = reg, Region_alt = reg_alt, 
      #                      Region_type = rr, Strata_included = st_inc, 
      #                      Strata_excluded = st_exc, Trend = median(tr), 
      #                      stringsAsFactors = FALSE)
      # for (qq in quantiles) {
      #   trendt[, paste0("Trend_Q", qq)] <- stats::quantile(tr, 
      #                                                      qq, names = FALSE)
      # }
      # trendt[, "Percent_Change"] <- 100 * (median(ch) - 
      #                                        1)
      # for (qq in quantiles) {
      #   trendt[, paste0("Percent_Change_Q", qq)] <- 100 * 
      #     (stats::quantile(ch, qq, names = FALSE) - 
      #        1)
      # }
      # if (slope) {
      #   trendt[, "Slope_Trend"] <- median(sl.t)
      #   for (qq in quantiles) {
      #     trendt[, paste0("Slope_Trend_Q", qq)] <- stats::quantile(sl.t, 
      #                                                              qq, names = FALSE)
      #   }
      # }
      # if (!is.null(prob_decrease)) {
      #   pch = 100 * (ch - 1)
      #   for (pp in prob_decrease) {
      #     trendt[, paste0("prob_decrease_", pp, "_percent")] <- length(pch[which(pch < 
      #                                                                              (-1 * pp))])/length(pch)
      #   }
      # }
      # if (!is.null(prob_increase)) {
      #   pch = 100 * (ch - 1)
      #   for (pp in prob_increase) {
      #     trendt[, paste0("prob_increase_", pp, "_percent")] <- length(pch[which(pch > 
      #                                                                              (pp))])/length(pch)
      #   }
      # }
      # trendt[, "Relative_Abundance"] <- mean(dsum[w_summary_rows, 
      #                                             "Index"])
      # trendt[, "Observed_Relative_Abundance"] <- mean(dsum[w_summary_rows, 
      #                                                      "obs_mean"])
      # trendt[, "Number_of_strata"] <- nstr
      # q1 = quantiles[1]
      # q2 = quantiles[length(quantiles)]
      # trendt[, paste0("Width_of_", (q2 - q1) * 100, "_percent_Credible_Interval")] <- trendt[, 
      #                                                                                        paste0("Trend_Q", q2)] - trendt[, paste0("Trend_Q", 
      #                                                                                                                                 q1)]
      # if (slope) {
      #   trendt[, paste0("Width_of_", (q2 - q1) * 100, 
      #                   "_percent_Credible_Interval_Slope")] <- trendt[, 
      #                                                                  paste0("Slope_Trend_Q", q2)] - trendt[, paste0("Slope_Trend_Q", 
      #                                                                                                                 q1)]
      # }
      # trendt[, "Number_of_Routes"] <- mean(dsum[w_summary_rows, 
      #                                           "nrts_total"])
      # trendt[, "Mean_Number_of_Routes"] <- mean(dsum[w_summary_rows, 
      #                                                "nrts"])
      # trendt[, "backcast_flag"] <- mean(dsum[w_summary_rows, 
      #                                        "backcast_flag"])
    
      
      
      trend_posteriors[[rrs]] <- list(route_number = mean(dsum[w_summary_rows, 
                                                               "nrts_total"]),
                                      mean_route_number = mean(dsum[w_summary_rows, 
                                                                    "nrts"]),
                                      year = Min_year,
                                      year_change = sl.t)
      
      
      
      #trend = rbind(trend, trendt)
    }
  }
  return(trend_posteriors)
}
