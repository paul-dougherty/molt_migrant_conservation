### in this script, we format the code for running eBird models of arrival

library(rstanarm)
library(rstan)
library(dplyr)
library(dggridR)
library(sp)
library(raster)
library(rgeos)
library(rgdal)
library(tidyverse)
library(auk)
library(lubridate)


# reading in the eBird data
lazb_zf <- auk_zerofill("zero_filled_checklists/ebd_lazb_az.txt", 
                        "zero_filled_checklists/ebd_checklists_az.txt", collapse = TRUE)


# preparing the eBird data for the species in each year
time_to_decimal <- function(x) {
  x <- hms(x, quiet = TRUE)
  hour(x) + minute(x) / 60 + second(x) / 3600
}

lazb_zf <- lazb_zf %>% 
  mutate(
    # convert X to NA
    observation_count = if_else(observation_count == "X", 
                                NA_character_, observation_count),
    observation_count = as.integer(observation_count),
    # effort_distance_km to 0 for non-travelling counts
    effort_distance_km = if_else(protocol_type != "Traveling", 
                                 0, effort_distance_km),
    # convert time to decimal hours since midnight
    time_observations_started = time_to_decimal(time_observations_started),
    # split date into year and day of year
    year = year(observation_date),
    day_of_year = yday(observation_date)
  )

lazb_zf <- filter(lazb_zf,!is.na(duration_minutes))

years <- c(2007:2022)

# Create an empty list to store the datasets
lazb_years <- list()

for(i in years){
  lazb_year <- lazb_zf %>%
    filter(year == i)
  
  lazb_year$shr <- scale(lazb_year$duration_minutes, scale = FALSE)[,1]
  #lazb_year$obs_no <- scale(lazb_year$number_observers, scale = FALSE)[,1]
  #lazb_year$dist <- scale(lazb_year$effort_distance_km, scale = FALSE)[,1]
  
  # Store the dataset in the list
  lazb_years[[paste0("lazb_", i)]] <- lazb_year
}


# running the model for each year -----------------------------------------
#number of iterations each model should be run
ITER <- 1500
CHAINS <- 4

#defaults for rstanarm are 0.95 and 15
DELTA <- 0.95
TREE_DEPTH <- 15

# for(i in 1:length(lazb_years)){
#   print(unique(lazb_years[[i]]$year))
# }

model_stats <- vector('list', length(lazb_years))
iteration_estimates <- vector('list', length(lazb_years))

for(i in 1:length(lazb_years)){
  fit <- rstanarm::stan_gamm4(species_observed ~ s(day_of_year, k = 30) + shr,
                              data = lazb_years[[i]],
                              family = binomial(link = "logit"),
                              algorithm = 'sampling',
                              iter = ITER,
                              chains = CHAINS,
                              cores = CHAINS,
                              adapt_delta = DELTA,
                              control = list(max_treedepth = TREE_DEPTH))
  
  num_diverge <- rstan::get_num_divergent(fit$stanfit)
  num_tree <- rstan::get_num_max_treedepth(fit$stanfit)
  num_BFMI <- length(rstan::get_low_bfmi_chains(fit$stanfit))
  
  
  #rerun model if divergences occurred
  while (num_diverge > 0 & DELTA <= 0.98)
  {
    DELTA <- DELTA + 0.01
    
    fit <- rstanarm::stan_gamm4(species_observed ~ s(day_of_year, k = 30) + shr,
                                data = lazb_years[[i]],
                                family = binomial(link = "logit"),
                                algorithm = 'sampling',
                                iter = ITER,
                                chains = CHAINS,
                                cores = CHAINS,
                                adapt_delta = DELTA,
                                control = list(max_treedepth = TREE_DEPTH))
    
    num_diverge <- rstan::get_num_divergent(fit$stanfit)
    num_tree <- rstan::get_num_max_treedepth(fit$stanfit)
    num_BFMI <- length(rstan::get_low_bfmi_chains(fit$stanfit))
  }
  
  max_Rhat <- round(max(summary(fit)[, 'Rhat']), 2)
  min_neff <- min(summary(fit)[, 'n_eff'])
  
  model_stats[[i]] <- data.frame(num_diverge, num_tree, num_BFMI, max_Rhat, min_neff)
  
  #generate predict data
  predictDays <- range(lazb_years[[i]]$day_of_year)[1]:range(lazb_years[[i]]$day_of_year)[2]
  newdata <- data.frame(day_of_year = predictDays, shr = 0)
  
  #predict response
  dfit <- rstanarm::posterior_linpred(fit, newdata = newdata, transform = T)
  halfmax_fit <- rep(NA, ((ITER/2)*CHAINS))
  max_fit <- rep(NA, ((ITER/2)*CHAINS))
  max_val <- rep(NA, ((ITER/2)*CHAINS))
  peak_length <- rep(NA, ((ITER/2)*CHAINS))
  #tlmax <- rep(NA, ((ITER/2)*CHAINS))
  
  #day at which probability of occurence is half local maximum value
  for (L in 1:((ITER/2)*CHAINS)){
    rowL <- as.vector(dfit[L,])

    lmax_idx <- which.max(rowL)
    lmax <- predictDays[which.max(rowL)]
    #tlmax[L] <- FALSE
    #}
    #store local max
    max_fit[L] <- lmax
    #local mins before max (global and local mins)
    lmin_idx <- (which.min(rowL[1:lmax_idx]))
    #              which(diff(sign(diff(rowL[1:lmax2_idx]))) == 2) + 1)
    lmin <- predictDays[lmin_idx]
    
    #value at local max - value at min (typically 0)
    dmm <- rowL[lmax_idx] - rowL[lmin_idx]
    #all positions less than or equal to half diff between max and min + value min
    tlm <- which(rowL <= ((dmm/2) + rowL[lmin_idx]))
    #which of these come before max and after or at min
    vgm <- tlm[which(tlm < lmax_idx & tlm >= lmin_idx)]
    #insert halfmax (first day for situations where max is a jday = 1)
    if (length(vgm) > 0){
      halfmax_fit[L] <- predictDays[max(vgm)]
    } else {
      halfmax_fit[L] <- predictDays[1]
    }
    
    # maximum probability of occurrence
    max_occ <- max(rowL)
    max_val[L] <- max_occ
    
    # all positions more than or the half maximum value
    above_half <- which(rowL >= ((dmm/2) + rowL[lmin_idx]))
    days_above_half <- length(above_half)
    peak_length[L] <- days_above_half
  }
  
  
  #model fit
  mn_dfit <- apply(dfit, 2, mean)
  LCI_dfit <- apply(dfit, 2, function(x) quantile(x, probs = 0.025))
  UCI_dfit <- apply(dfit, 2, function(x) quantile(x, probs = 0.975))
  
  #check whether local max exists for mean model fit
  mlmax <- sum(diff(sign(diff(mn_dfit))) == -2)
  #if (mlmax > 0)
  #{
  #  arrival_df$mlmax[counter] <- TRUE
  #} else {
  #  arrival_df$mlmax[counter] <- FALSE
  #}
  
  #estimated halfmax
  mn_hm <- mean(halfmax_fit)
  LCI_hm <- quantile(halfmax_fit, probs = 0.025)
  UCI_hm <- quantile(halfmax_fit, probs = 0.975)
  
  #estimated max
  mn_max <- mean(max_fit)
  LCI_max <- quantile(max_fit, probs = 0.025)
  UCI_max <- quantile(max_fit, probs = 0.975)
  
  #estimated max prob occurrence
  mn_max_val <- mean(max_val)
  LCI_max_val <- quantile(max_val, probs = 0.025)
  UCI_max_val <- quantile(max_val, probs = 0.975)
  
  #estimated days above halfway value
  mn_peak_length <- mean(peak_length)
  LCI_peak_length <- quantile(peak_length, probs = 0.025)
  UCI_peak_length <- quantile(peak_length, probs = 0.975)
  
  model_stats[[i]]$mn_hm <- mn_hm
  model_stats[[i]]$LCI_hm <- LCI_hm
  model_stats[[i]]$UCI_hm <- UCI_hm
  
  model_stats[[i]]$mn_max <- mn_max
  model_stats[[i]]$LCI_max <- LCI_max
  model_stats[[i]]$UCI_max <- UCI_max
  
  model_stats[[i]]$mn_max_val <- mn_max_val
  model_stats[[i]]$LCI_max_val <- LCI_max_val
  model_stats[[i]]$UCI_max_val <- UCI_max_val
  
  model_stats[[i]]$mn_peak_length <- mn_peak_length
  model_stats[[i]]$LCI_peak_length <- LCI_peak_length
  model_stats[[i]]$UCI_peak_length <- UCI_peak_length
  
  model_stats[[i]]$year <- unique(lazb_years[[i]]$year)
  model_stats[[i]]$species <- unique(lazb_years[[i]]$scientific_name)
  
  iteration_estimates[[i]] <- list(year = unique(lazb_years[[i]]$year), 
                                   species = unique(lazb_years[[i]]$scientific_name), 
                                   halfmax_fit = halfmax_fit, 
                                   max_fit = max_fit,
                                   max_val = max_val,
                                   peak_length = peak_length)
}


model_stats_all <- do.call(rbind, model_stats)
iteration_estimates

saveRDS(iteration_estimates, file="lazb_iterations_az.RData")
readRDS("eBird_iterations.RData")

# need to make sure halfway arrival estimate is before July 1st (182 Julian day, 183 in leap years)
