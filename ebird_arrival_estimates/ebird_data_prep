### In this script, we use the auk package to filter eBird checklists 
### down to only those that we can use to predict the distributions/
### relative abundances of focal taxa during the breeding season. Our 
### filtering decisions were largely inspired by Strimas-Mackey et al.
### (2020), although we also considered the life history of focal taxa
### (see below). For the sake of clarity, I filtered checklists for each
### taxon separately (as opposed to using a for loop or something similar).

### Much of this code has been taken from the "Best Practices for Using eBird Data" 
### guide by Strimas-Mackey et al. (2020):

### Strimas-Mackey, M., W.M. Hochachka, V. Ruiz-Gutierrez, O.J. Robinson, E.T. Miller,
### T. Auer, S. Kelling, D. Fink, A. Johnston. 2020. Best Practices for Using eBird 
### Data. Version 1.0. https://cornelllabofornithology.github.io/ebird-best-practices/. 
### Cornell Lab of Ornithology, Ithaca, New York. https://doi.org/10.5281/zenodo.3620739

#packages for preparing eBird data
library(tidyverse)
library(auk)
library(lubridate)

setwd("/Volumes/project/CarlingLab/pdoughe1/Molt_migrant_conservation/monsoon_arrival_estimates") # accessing eBird data in Alcova

# defining the directory for the eBird data
ebd_dir <-"/Volumes/project/CarlingLab/pdoughe1/Molt_migrant_conservation/monsoon_arrival_estimates"
#ebd_dir <- "/pfs/tsfs1/gscratch/pdoughe1" # if doing on Teton
#ebd_dir <- "/pfs/tc1/gscratch/pdoughe1"  # if doing on Beartooth

#=============================================================================================
#     preparing eBird data
#=============================================================================================
## Download eBird data for focal taxa from https://ebird.org/science/use-ebird-data 
## (after obtaining permission, of course)..

# filtering checklists for first parental species -------------------------
# filtering checklists for Indigo Bunting

ebd <- auk_ebd("ebd_US-AZ_200705_202309_smp_relAug-2023/ebd_US-AZ_200705_202309_smp_relAug-2023.txt",
               file_sampling = "ebd_US-AZ_200705_202309_smp_relAug-2023/ebd_US-AZ_200705_202309_smp_relAug-2023_sampling.txt")


ebd_filters <- ebd %>% 
  auk_species(species = c("Lazuli Bunting")) %>%
  ## restrict to the standard traveling and stationary count protocols
  auk_protocol(protocol = c("Stationary", "Traveling")) %>%
  auk_time(start_time = c("05:00", "19:00")) %>% 
  auk_date(date = c("*-06-01", "*-10-31")) %>%
  #auk_last_edited(date = c("2010-01-01" , "2018-12-31")) %>% #we're keeping all years
  auk_county(county = c("US-AZ-012", "US-AZ-027", "US-AZ-013", "US-AZ-021", "US-AZ-019", 
                        "US-AZ-023", "US-AZ-007", "US-AZ-009", "US-AZ-003", "US-AZ-011")) %>% #can be interesting 
  # to only look at counties in southern arizona where many of these species are 
  # almost definitely stopping over to molt 
  auk_complete()

ebd_filters # viewing the filters

# merging eBird and sampling data for one species at a time
data_dir <- "zero_filled_checklists"
if (!dir.exists(data_dir)) {
  dir.create(data_dir)
}

f_ebd <- file.path(data_dir, "ebd_lazb.txt")
f_sampling <- file.path(data_dir, "ebd_lazb_sampling.txt")

## filtering the data, only run if the files don't already exist,
if (!file.exists(f_ebd)) {
  auk_filter(ebd_filters, file = f_ebd, file_sampling = f_sampling)
}

lazb_zf <- auk_zerofill(f_ebd, f_sampling, collapse = TRUE)

lazb_zf <- auk_zerofill("zero_filled_checklists/ebd_lazb_az.txt", 
                        "zero_filled_checklists/ebd_checklists_az.txt", collapse = TRUE)

## cleaning up eBird dataset and preparing it for analyses
# function to convert time observation to hours since midnight
time_to_decimal <- function(x) {
  x <- hms(x, quiet = TRUE)
  hour(x) + minute(x) / 60 + second(x) / 3600
}

lazb_zf <- lazb_zf %>% 
  mutate(
    # convert X to NA
    observation_count = if_else(observation_count == "X", 
                                NA_character_, observation_count),
    observation_count = as.integer(observation_count),
    # effort_distance_km to 0 for non-travelling counts
    effort_distance_km = if_else(protocol_type != "Traveling", 
                                 0, effort_distance_km),
    # convert time to decimal hours since midnight
    time_observations_started = time_to_decimal(time_observations_started),
    # split date into year and day of year
    year = year(observation_date),
    day_of_year = yday(observation_date)
  )


## saving to csv file
write.csv(lazb_zf, "zero_filled_checklists/lazuli_bunting_zf.csv", na = "", row.names=FALSE)


